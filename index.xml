<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alienchang blog</title>
    <link>https://alienchang.github.io/</link>
    <description>Recent content on Alienchang blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Feb 2023 10:05:02 +0800</lastBuildDate><atom:link href="https://alienchang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenCV识别人脸</title>
      <link>https://alienchang.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/opencv%E8%AF%86%E5%88%AB%E4%BA%BA%E8%84%B8/</link>
      <pubDate>Tue, 28 Feb 2023 10:05:02 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/opencv%E8%AF%86%E5%88%AB%E4%BA%BA%E8%84%B8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>IOS视频循环播放</title>
      <link>https://alienchang.github.io/post/%E6%92%AD%E6%94%BE%E5%99%A8/ios%E8%A7%86%E9%A2%91%E5%BE%AA%E7%8E%AF%E6%92%AD%E6%94%BE/</link>
      <pubDate>Sat, 17 Dec 2022 17:18:48 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/%E6%92%AD%E6%94%BE%E5%99%A8/ios%E8%A7%86%E9%A2%91%E5%BE%AA%E7%8E%AF%E6%92%AD%E6%94%BE/</guid>
      <description>&lt;h2 id=&#34;一avplayer监听播放结束实现循环播放&#34;&gt;一、AVPlayer监听播放结束，实现循环播放&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;添加播放器播放结束监听&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[[NSNotificationCenter defaultCenter] addObserver:self
                                         selector:@selector(playerItemDidPlayToEndTime:)
                                             name:AVPlayerItemDidPlayToEndTimeNotification
                                           object:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在结束访法中seek视频到开始时间点&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- (void)playerItemDidPlayToEndTime:(NSNotification *)notification {
    [self.player seekToTime:kCMTimeZero]
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二avplayerlooper循环播放&#34;&gt;二、AVPlayerLooper循环播放&lt;/h2&gt;
&lt;p&gt;原生方法，可完全替代方法一&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NSURL *url = nil;
AVPlayerItem *playerItem = [[AVPlayerItem alloc] initWithURL:url];
AVQueuePlayer *player = [AVQueuePlayer queuePlayerWithItems:@[playerItem]];
AVPlayerLayer *playerLayer = [AVPlayerLayer playerLayerWithPlayer:player];
AVPlayerLooper *playerLooper = [AVPlayerLooper playerLooperWithPlayer:player templateItem:playerItem];
[player play];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;三mpmovieplayercontroller实现循环播放&#34;&gt;三、MPMoviePlayerController实现循环播放&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;self.url = [NSURL fileURLWithPath:[[NSBundle mainBundle]pathForResource:@&amp;#34;new&amp;#34; ofType:@&amp;#34;mp4&amp;#34;]];
self.player = [[MPMoviePlayerController alloc] initWithContentURL:self.url];
[self.view addSubview:self.player.view];
self.player.shouldAutoplay = YES;
self.player.repeatMode = MPMovieRepeatModeOne;
[self.player.view setFrame:self.view.bounds];
self.player.scalingMode = MPMovieScalingModeAspectFill;
[self.player play];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;四ijkplayer循环播放&#34;&gt;四、ijkplayer循环播放&lt;/h2&gt;
&lt;p&gt;使用ijkPlayerDemo中的IJKFFMoviePlayerController做测试，IJKFFMoviePlayerController本身没有循环播放代码，需要手动添加一下。&lt;/p&gt;
&lt;p&gt;先在IJKFFMoviePlayerController中添加loop属性，为bool类型，然后在.m文件421行添加相关代码 ijkmp_set_loop&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- (void)play
{
    if (!_mediaPlayer)
        return;

    [self setScreenOn:_keepScreenOnWhilePlaying];

    [self startHudTimer];
    if (self.loop) {
        ijkmp_set_loop(_mediaPlayer, INT_MAX);
    } else {
        ijkmp_set_loop(_mediaPlayer, 1);
    }
    
    ijkmp_start(_mediaPlayer);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;self.videoPlayer = [[IJKFFMoviePlayerController alloc] initWithContentURL:[NSURL fileURLWithPath:path] withOptions:options];
self.videoPlayer.view.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;
self.videoPlayer.view.frame = self.view.bounds;
self.videoPlayer.loop = YES;
self.videoPlayer.scalingMode = IJKMPMovieScalingModeAspectFill;
self.videoPlayer.shouldAutoplay = YES;
//        self.containView.autoresizesSubviews = YES;
[self.view addSubview:self.videoPlayer.view];
[self.videoPlayer prepareToPlay];
[self.videoPlayer play];
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>IOS视频采集以及预览</title>
      <link>https://alienchang.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/ios%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86%E4%BB%A5%E5%8F%8A%E9%A2%84%E8%A7%88/</link>
      <pubDate>Thu, 20 Oct 2022 14:14:19 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/ios%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86%E4%BB%A5%E5%8F%8A%E9%A2%84%E8%A7%88/</guid>
      <description>&lt;h2 id=&#34;一视频采集流程&#34;&gt;一、视频采集流程&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 初始化采集会话 
2. 设置采集设备
3. 设置视频采集输入对象
4. 设置视频采集输出对象及参数
5. 开始采集
6. 采集回调数据处理
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;初始化采集会话&#34;&gt;初始化采集会话&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- (void)setupCaptureSession {
    self.captureSession = [AVCaptureSession new];
    [self.captureSession beginConfiguration];
    if ([self.captureSession canSetSessionPreset:AVCaptureSessionPreset1280x720]) {
        [self.captureSession setSessionPreset:AVCaptureSessionPreset1280x720];
    }
    [self.captureSession commitConfiguration];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;设置采集设备&#34;&gt;设置采集设备&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- (void)setupDevice {
    // 这里我们获取前置摄像头
    self.device = [self captureDeviceWithPosition:(AVCaptureDevicePositionFront)];
    // 一般直播16-18，电影24
    [self setFPS:16];
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/// 获取采集设备
- (AVCaptureDevice *)captureDeviceWithPosition:(AVCaptureDevicePosition)position {
    AVCaptureDevice *deviceRet = nil;
    if (position != AVCaptureDevicePositionUnspecified) {
        NSArray&amp;lt;AVCaptureDeviceType&amp;gt; *deviceTypes = @[AVCaptureDeviceTypeBuiltInWideAngleCamera,    // 广角镜头
                                                      AVCaptureDeviceTypeBuiltInDualCamera];        // 正常情况下是主摄
        
        AVCaptureDeviceDiscoverySession *sessionDiscovery = [AVCaptureDeviceDiscoverySession discoverySessionWithDeviceTypes:deviceTypes mediaType:AVMediaTypeVideo position:AVCaptureDevicePositionFront];
        
        NSArray&amp;lt;AVCaptureDevice *&amp;gt; *devices = sessionDiscovery.devices;//当前可用的AVCaptureDevice集合
        for (AVCaptureDevice *device in devices) {
            if ([device position] == position) {
                deviceRet = device;
            }
        }
    }
    return deviceRet;
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 这是设备输出的fps
- (void)setFPS:(NSInteger)fps {
    if (fps &amp;gt; 0) {
        AVFrameRateRange *frameRateRange = self.device.activeFormat.videoSupportedFrameRateRanges.firstObject;
        if(!frameRateRange) {
            // 无法获取摄像头
            return;
        }

        if (fps &amp;gt;= frameRateRange.maxFrameRate) {
            fps = frameRateRange.maxFrameRate;
        } else if (fps &amp;lt;= frameRateRange.minFrameRate) {
            fps = frameRateRange.minFrameRate;
        }

        CMTime frameDuration = CMTimeMake(1 , (int)fps);
        [self.captureSession beginConfiguration];
        NSError *error = nil;
        if ([self.device lockForConfiguration:&amp;amp;error]) {
            self.device.activeVideoMaxFrameDuration = frameDuration;
            self.device.activeVideoMinFrameDuration = frameDuration;
            [self.device unlockForConfiguration];
        } else {
            // 设置失败
        }
        [self.captureSession commitConfiguration];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;设置视频采集输入对象&#34;&gt;设置视频采集输入对象&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- (void)setupInput {
    NSError *error = nil;
    self.deviceInput = [AVCaptureDeviceInput deviceInputWithDevice:self.device error:&amp;amp;error];
    [self.captureSession beginConfiguration];
    if ([self.captureSession canAddInput:self.deviceInput]) {
        [self.captureSession addInput:self.deviceInput];
    }
    [self.captureSession commitConfiguration];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;设置视频采集输出对象及参数&#34;&gt;设置视频采集输出对象及参数&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- (void)setupOutput {
    self.deviceOutput = [AVCaptureVideoDataOutput new];
    // 输出下一帧时是否丢弃上一帧
    self.deviceOutput.alwaysDiscardsLateVideoFrames = YES;
    // 输出视频色彩空间为yuv420（也可以为RGB）
    self.deviceOutput.videoSettings = @{
        (id)kCVPixelBufferPixelFormatTypeKey : [NSNumber numberWithInt:kCVPixelFormatType_420YpCbCr8BiPlanarFullRange]
    };
    // 设置视频数据输出回调
    [self.deviceOutput setSampleBufferDelegate:self queue:self.bufferQueue];
    self.captureConnection = [self.deviceOutput connectionWithMediaType:AVMediaTypeVideo];
    
    // 设置输出图像方向
    if ([self.captureConnection isVideoOrientationSupported]) {
        [self.captureConnection setVideoOrientation:AVCaptureVideoOrientationPortrait];
    }
    
    // 设置是否镜像
    if ([self.captureConnection isVideoMirroringSupported]) {
        [self.captureConnection setVideoMirrored:YES];
    }
    
    [self.captureSession beginConfiguration];
    if ([self.captureSession canAddOutput:self.deviceOutput]) {
        [self.captureSession addOutput:self.deviceOutput];
    }
    [self.captureSession commitConfiguration];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;开始采集&#34;&gt;开始采集&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- (void)startCatpure {
    if (!(self.device &amp;amp;&amp;amp; self.deviceInput &amp;amp;&amp;amp; self.deviceOutput)) {
        return;
    }
    
    if (self.captureSession &amp;amp;&amp;amp; ![self.captureSession isRunning]) {
        [self.captureSession startRunning];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;采集回调数据处理&#34;&gt;采集回调数据处理&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#pragma mark -- AVCaptureVideoDataOutputSampleBufferDelegate
- (void)captureOutput:(AVCaptureOutput *)captureOutput didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer fromConnection:(AVCaptureConnection *)connection {
    //获取每一帧图像信息
    CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)CMSampleBufferGetImageBuffer(sampleBuffer);
    NSLog(@&amp;#34;%@&amp;#34;,pixelBuffer);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本文demo： &lt;a href=&#34;https://github.com/Alienchang/TestiOSCapture&#34;&gt;https://github.com/Alienchang/TestiOSCapture&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>图像色彩格式</title>
      <link>https://alienchang.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%9B%BE%E5%83%8F%E8%89%B2%E5%BD%A9%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Thu, 13 Oct 2022 15:18:48 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%9B%BE%E5%83%8F%E8%89%B2%E5%BD%A9%E6%A0%BC%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>图像磨皮原理</title>
      <link>https://alienchang.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%9B%BE%E5%83%8F%E7%A3%A8%E7%9A%AE%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 13 Oct 2022 15:02:31 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%9B%BE%E5%83%8F%E7%A3%A8%E7%9A%AE%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>NSError传参</title>
      <link>https://alienchang.github.io/post/nserror%E4%BC%A0%E5%8F%82/</link>
      <pubDate>Fri, 08 Apr 2022 14:20:49 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/nserror%E4%BC%A0%E5%8F%82/</guid>
      <description></description>
    </item>
    
    <item>
      <title>视频测试资源</title>
      <link>https://alienchang.github.io/post/%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95%E8%B5%84%E6%BA%90/</link>
      <pubDate>Fri, 08 Apr 2022 13:25:21 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95%E8%B5%84%E6%BA%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>performSelector may cause a leak because its selector is unknown</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/performselector%E8%AD%A6%E5%91%8A%E6%9B%BF%E6%8D%A2%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 04 Mar 2022 18:37:02 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/performselector%E8%AD%A6%E5%91%8A%E6%9B%BF%E6%8D%A2%E6%96%B9%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>好玩网站</title>
      <link>https://alienchang.github.io/post/%E7%8E%A9/%E5%A5%BD%E7%8E%A9%E7%BD%91%E7%AB%99/</link>
      <pubDate>Tue, 15 Feb 2022 13:20:12 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/%E7%8E%A9/%E5%A5%BD%E7%8E%A9%E7%BD%91%E7%AB%99/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS内存分布</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</link>
      <pubDate>Tue, 15 Feb 2022 01:31:58 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</guid>
      <description></description>
    </item>
    
    <item>
      <title>面试题，算法</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 15 Feb 2022 01:25:30 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS中事件的响应链和传递链</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E4%B8%AD%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%93%8D%E5%BA%94%E9%93%BE%E5%92%8C%E4%BC%A0%E9%80%92%E9%93%BE/</link>
      <pubDate>Tue, 15 Feb 2022 00:48:12 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E4%B8%AD%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%93%8D%E5%BA%94%E9%93%BE%E5%92%8C%E4%BC%A0%E9%80%92%E9%93%BE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS多读单写</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%A4%9A%E8%AF%BB%E5%8D%95%E5%86%99/</link>
      <pubDate>Mon, 14 Feb 2022 10:17:42 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%A4%9A%E8%AF%BB%E5%8D%95%E5%86%99/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS多线程GCD</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%A4%9A%E7%BA%BF%E7%A8%8Bgcd/</link>
      <pubDate>Sun, 13 Feb 2022 23:43:47 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%A4%9A%E7%BA%BF%E7%A8%8Bgcd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS多线程</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sun, 13 Feb 2022 23:42:19 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS属性修饰符</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Sun, 13 Feb 2022 23:38:27 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS消息转发</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Sun, 13 Feb 2022 23:25:44 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80/ios%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS基础知识1</title>
      <link>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/</link>
      <pubDate>Sun, 13 Feb 2022 15:13:27 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/ios%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hugo搭建博客</title>
      <link>https://alienchang.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 11 Feb 2022 14:00:09 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>Mac用户 brew install hugo 创建新网站 hugo new site AlienchangSite 打开主题网站，选一个主题 cd AlienchangSite/themes git clone https://github.com/vaga/hugo-theme-m10c.git 新建文章 hugo new post/first.md 本地预览 hugo server -t hugo-tranquilpeak-theme -D http://localhost:1313/ hugo -D 构建静态页面 public 文件夹下</description>
    </item>
    
    <item>
      <title>Sirikit Shortcuts</title>
      <link>https://alienchang.github.io/post/sirikit-shortcuts/</link>
      <pubDate>Mon, 24 Dec 2018 15:19:37 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/sirikit-shortcuts/</guid>
      <description></description>
    </item>
    
    <item>
      <title>练习demo</title>
      <link>https://alienchang.github.io/post/%E7%BB%83%E4%B9%A0demo/</link>
      <pubDate>Sat, 21 Jan 2017 16:49:28 +0800</pubDate>
      
      <guid>https://alienchang.github.io/post/%E7%BB%83%E4%B9%A0demo/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;instagram download image tweak（用于下载instagram的图片）
&lt;a href=&#34;https://github.com/Alienchang/instagramDownloadImageTweak/tree/master&#34;&gt;https://github.com/Alienchang/instagramDownloadImageTweak/tree/master&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GoogleTranslate
&lt;a href=&#34;https://github.com/Alienchang/GoogleTranslate&#34;&gt;https://github.com/Alienchang/GoogleTranslate&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EasyAddressBook（通讯录获取）
&lt;a href=&#34;https://github.com/Alienchang/EasyAddressBook&#34;&gt;https://github.com/Alienchang/EasyAddressBook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Mac系统下，Flask、uwsgi、Nginx部署应用</title>
      <link>https://alienchang.github.io/post/mac%E7%B3%BB%E7%BB%9F%E4%B8%8Bflaskuwsginginx%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alienchang.github.io/post/mac%E7%B3%BB%E7%BB%9F%E4%B8%8Bflaskuwsginginx%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ValueForKeyPath的隐藏用法</title>
      <link>https://alienchang.github.io/post/valueforkeypath%E7%9A%84%E9%9A%90%E8%97%8F%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alienchang.github.io/post/valueforkeypath%E7%9A%84%E9%9A%90%E8%97%8F%E7%94%A8%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>我在这里等你（GCD）</title>
      <link>https://alienchang.github.io/post/%E6%88%91%E5%9C%A8%E8%BF%99%E9%87%8C%E7%AD%89%E4%BD%A0gcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alienchang.github.io/post/%E6%88%91%E5%9C%A8%E8%BF%99%E9%87%8C%E7%AD%89%E4%BD%A0gcd/</guid>
      <description>BOOL ifYouBack = false; - (void)waitForYou{ dispatch_queue_t ourLifeQueue = dispatch_get_main_queue(); // dispatch_queue_t waitForYouQueue = dispatch_queue_create(&amp;#34;I.AM.ALWAYS.HERE&amp;#34;, DISPATCH_QUEUE_CONCURRENT); dispatch_queue_t waitForYouQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0); dispatch_async(waitForYouQueue, ^{ while (![self ifYouback]) { dispatch_sync(ourLifeQueue, ^{ NSLog(@&amp;#34;let&amp;#39;s begin a happy life, 115-110-111-119&amp;#34;); }); } }); while (![self ifYouback]) { sleep(1); dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ while (![self ifYouback]) { NSLog(@&amp;#34;do some thing for life&amp;#34;); } }); } } - (BOOL)ifYouback{ return ifYouBack; } </description>
    </item>
    
  </channel>
</rss>
